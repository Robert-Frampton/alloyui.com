---
layout: single-doc
title: Debounce
tags: 'debounce'
category: Debounce
description: Allows users to give functions a debounce method.
---

#### Getting Started

First load the seed files if you haven't yet.

``` html
<script src="<%= @getCdnSeed() %>"></script>
<link href="<%= @getCdnCss() %>" rel="stylesheet">
```

Then initialize AlloyUI and load the Debounce module.

``` javascript
AUI().use(
	'aui-base',
	'aui-debounce',
	function(A) {
		// code goes here
	}
);
```
---

#### About Debounce

Debounce is a term that comes from electrical engineering. It helps keep functions from executing too many times, by waiting until the user has paused some task for a specific amount of time. This is useful for times when you want to do some expensive operation in Javascript, but don't want it to slow down the interaction.

For example, let's say that when a user types into a text box, on key press you want to: manipulate large sections of DOM, perform an Ajax request, and/or do complex validation on the inputted text. These are all good cases where debouncing can be useful.

You can use also use Debounce if you want to have two specific debounced functions for different tasks, and use interaction to cancel one and perform the other. You can see this in use in the Real World Example.

---

#### Using Debounce

First, create an HTML framework that you can execute your Debounce instance in. This example will be a simple validation of a string of numbers, with a Debounce method that will be executed after a half-second delay.

``` html
<div class="aui-ctrl-holder">
	<label for="username">Number</label>
	<input class="aui-text-input" id="longNumber" name="longNumber" type="text" />
	<p class="aui-form-hint">
		<span>Type a long number here, and the validation will only happen once you stop typing for a small period of time.</span>
	</p>
</div>
```
Add a little CSS for aesthetic sake...

```css
.aui-icon-button {
	display: inline-block;
	float: none;
	vertical-align: middle;
}
```

Now create a new instance of Debounce. Start by declaring the variables `inputNode` and `symbol`.

``` javascript
AUI().use(
	'aui-base',
	'aui-debounce',
	function(A) {
		var inputNode = A.one('#longNumber');
		var symbol = A.Node.create('<span class="aui-button aui-button-content aui-icon-button aui-helper-hidden"><span class="aui-icon"></span></span>');

		inputNode.get('parentNode').insertBefore(symbol, inputNode.get('nextSibling'));

```

Then, add a debounced version of the symbol.hide() method with a half second delay, that fires in the context of "symbol." The time between the debounce method being called is declared in milliseconds.

``` javascript
		inputNode.on(
			'keypress',
			A.debounce(
				function(event) {
					var value = A.Lang.trim(this.get('value'));

					if (value.length) {
						var childIcon = symbol.get('firstChild');

						symbol.show();

						if (/^[0-9]+$/.test(value)) {
							childIcon.removeClass('aui-icon-alert');
							childIcon.addClass('aui-icon-circle-check');
						}
						else {
							childIcon.addClass('aui-icon-alert');
							childIcon.removeClass('aui-icon-circle-check');
						}

						hideSymbolFn();
					}
					else {
						hideSymbolFn.cancel();
					}
				},
				500
			)
		);
	}
);
```
Run it for yourself to see how it works. If run correctly, you should see an icon appear after a short delay, which will signify whether you entered a string of numbers, or something else.

There are a number of uses for Debounce, and each will be different depending on individual needs. So check out the examples and play around with it!

<div class="alert alert-success">
	For more information about configuration, check out our <a href="<%= @getSiteUrl() %>/api/">API Docs</a>.
</div>