---
layout: single-doc
title: Resize
tags: 'resize'
category: Resize
description: Allows users to allow and define resizing properties.
---

#### Getting Started

First load the seed file if you haven't yet.

``` html
<script src="<%= @getCdnSeed() %>"></script>
<link href="<%= @getCdnCss() %>" rel="stylesheet">
```

Then initialize AlloyUI and load the Rating module.

``` javascript
AUI().use(
  'aui-resize',
  function(A) {
    // code goes here
  }
);
```
---

#### Using Resize

Create an HTML element to be resized. In this case, it will be one of the images from the Carousel module:

``` html
<div id="myResize">
    <img src="http://alloyui.com/carousel/img/1.jpg" id="myImage" />
</div>
```

Now create a new instance of Resize component by setting `node` to our HTML element's selector, and specifiy whether or not you want to have the Resize module resize a `proxy` element or a real one. We will leave all other options empty for a stock Resizing configuration. Finally, let's render it!

``` javascript
AUI().use(
  'aui-resize',
  function(A) {
    new A.Resize(
      {
        node: '#myImage',
        proxy: true
      }
    ).render();
  }
);
```

#### Configuring Resize

There are some other optional parameters that you can pass to your Rating instance.

For example, you can pass the `size` option a whole number for how many choices you want Rating to have:

``` javascript
AUI().use(
  'aui-resize',
  function(A) {
    new A.StarRating(
      {
        boundingBox: '#myRating',
        size: 8
      }
    ).render();
  }
);
```

Setting `showTitle` to `true` displays the string you have set for `title` as a tooltip when user hovers over Rating.

``` javascript
AUI().use(
  'aui-resize',
  function(A) {
    new A.StarRating(
      {
        boundingBox: '#myRating',
        showTitle: true,
        size: 8,
        title: "A new way to Rate!"
      }
    ).render();
  }
);
```

#### Rendering from HTML

You can also define Rating choices from HTML `radio` inputs, enabling control over individual `title` for each input!  Further, you can set event handlers using `on` or `after` options to run code on Rating events.  Each rating event is passed in object `this` for the rating choice with includes data such as `title` and `value`.  Add a `div` below rating and we will print a message containing event data.

``` html
<div id="myRating">
  <input type="radio" title="Horrible" />
  <input type="radio" title="Very bad" />
  <input type="radio" title="Bad" />
  <input type="radio" title="Acceptable" />
  <input type="radio" title="Good" />
  <input type="radio" title="Very good" />
  <input type="radio" title="Perfect" />
</div>

<div id="print"></div>
```

``` javascript
AUI().use(
  'aui-resize',
  function(A) {
    new A.StarRating(
      {
        after: {
          itemSelect: function(event) {
            var title = this.get('title');
            var stars = this.get('value') + 1;
            stars += ' Stars';
            A.one('#print').set('innerHTML', 'You selected ' + title + ' - ' + stars);
          }
        },
        boundingBox: '#myRating',
        showTitle: true
      }
    ).render();
  }
);
```

<div class="alert alert-success">
  For more information about configuration, check out our <a href="<%= @getSiteUrl() %>/api/">API Docs</a>.
</div>